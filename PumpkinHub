local scriptver = "BETA"

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "PumpkinHub â”ƒ ".. scriptver, HidePremium = false, SaveConfig = true, ConfigFolder = "KYS1", IntroText = "PumpkinHub", IntroIcon = "https://i.e-z.host/nbo558hv.png"})

local Tab = Window:MakeTab({
    Name = "Player",
    Icon = "rbxassetid://",
    PremiumOnly = false
})

local Section = Tab:AddSection({
    Name = "Player"
})

Tab:AddSlider({
    Name = "Walkspeed",
    Min = 16,
    Max = 500,
    Default = 16,
    Color = Color3.fromRGB(218,73,0),
    Increment = 1,
    ValueName = "",
    Callback = function(new)
        _G.WS = new;
    local Humanoid = game:GetService("Players").LocalPlayer.Character.Humanoid;
    Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        Humanoid.WalkSpeed = _G.WS;
    end)
    Humanoid.WalkSpeed = _G.WS;
    end    
})


Tab:AddSlider({
    Name = "Jumppower",
    Min = 50,
    Max = 500,
    Default = 50,
    Color = Color3.fromRGB(218,73,0),
    Increment = 1,
    ValueName = "",
    Callback = function(value)
        _G.JP = value
        local Humanoid = game:GetService("Players").LocalPlayer.Character.Humanoid
        Humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
        Humanoid.JumpPower = _G.JP
        end)
        Humanoid.JumpPower = _G.JP
    end    
})




function toggleNoClip()
    local disableCollide 
    disableCollide = game:GetService("RunService").Stepped:connect(function()
    for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
    if noclipping == false then
    disableCollide:Disconnect()
    return
    end
    if v:IsA("BasePart") then
    v.CanCollide = false
    end
    end
    end)
    end



Tab:AddToggle({
    Name = "Noclip",
    Default = false,
    Callback = function(value)
        if value == true then
            noclipping = true
            toggleNoClip()
            elseif value == false then
            noclipping = false
            toggleNoClip()
            end
end})



        


Tab:AddSlider({
    Name = "FOV",
    Min = 10,
    Max = 140,
    Default = 70,
    Color = Color3.fromRGB(218,73,0),
    Increment = 1,
    ValueName = "",
    Callback = function(new)
        game.Workspace.Camera.FieldOfView = new
    end    
})


Tab:AddButton({
	Name = "Reset FOV",
	Callback = function()
        game.Workspace.Camera.FieldOfView = 70
  	end    
})



local Tab = Window:MakeTab({
	Name = "World",
	Icon = "rbxassetid://",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Sky options(not done)"
})



loadstring([[
function FreeLand()
    for a,b in pairs(workspace.Properties:GetChildren()) do 
        if b:FindFirstChild("Owner") and b:FindFirstChild("OriginSquare") and b.Owner.Value == nil then 
       wait(1)
       game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(b, b.OriginSquare.OriginCFrame.Value.p + Vector3.new(0,3,0))
      for i,v in pairs(game.Workspace.Properties:GetChildren()) do
       if v.Owner.Value == game.Players.LocalPlayer then
      wait(0.1)
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,10,0)
      wait(0.1)
       game.Players.LocalPlayer.Character.Jump = false
      break
      end
      end
      end
      end
      end
]])();


function LoadSlot()
    local LoadSlot = game.ReplicatedStorage.LoadSaveRequests.ClientMayLoad:InvokeServer(player)
        if LoadSlot then
            game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(Slot, player)
        end
    end
    



local Tab = Window:MakeTab({
	Name = "Dupe",
	Icon = "rbxassetid://",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Information"
})


Tab:AddSlider({
	Name = "Slot Number",
	Min = 0,
	Max = 6,
	Default = 0,
	Color = Color3.fromRGB(218,73,0),
	Increment = 1,
	ValueName = "",
	Callback = function(new)
		Slot = tonumber(new)
	end    
})


Tab:AddTextbox({
	Name = "Slot TP Time",
	Default = "",
	TextDisappear = false,
	Callback = function(new)
		timetotp = tonumber(new)
	end	  
})

Tab:AddTextbox({
	Name = "Time To Removed",
	Default = "",
	TextDisappear = false,
	Callback = function(new)
		timetoremove = tonumber(new)
	end	  
})



local Section = Tab:AddSection({
	Name = "Maxland Dupe - Auto"
})

local N=game:GetService("VirtualInputManager")




Tab:AddButton({
	Name = "Start Auto Dupe",
	Callback = function()
        print("Loading slot")
        N:SendKeyEvent(true,"Q",false,game)
        wait(0.1) -- free land
        N:SendKeyEvent(true,"T",false,game)
        wait(0.1) -- loads the base
        N:SendKeyEvent(true,"P",false,game) -- kicks from game
        LoadSlot()
  	end    
})






local Section = Tab:AddSection({
	Name = "Maxland Dupe - Manual"
})

Tab:AddButton({
	Name = "Start Manual Dupe",
	Callback = function()
        OrionLib:MakeNotification({
            Name = "Pumpkin",
            Content = 'Once on the loading screen press "Max land dupe step 2."',
            Image = "rbxassetid://12576176007",
            Time = 5
        })
        Loadslot()
  	end    
})



Tab:AddButton({
	Name = "Manual Dupe | Step 2",
	Callback = function()
        OrionLib:MakeNotification({
            Name = "Pumpkin",
            Content = 'Please now load your plot and press Max land dupe step 3".',
            Image = "rbxassetid://12576176007",
            Time = 5
        })
        FreeLand()
  	end    
})


Tab:AddButton({
	Name = "Manual Dupe | Step 3",
	Callback = function()
        wait(timetotp)
        loadstring(game:GetObjects("rbxassetid://2662507900")[1].Source)()
  	end    
})


local Section = Tab:AddSection({
	Name = "Claim Base"
})

Tab:AddButton({
	Name = "Select Plot",
	Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/Wj49DUwL"))()
  	end    
})

Tab:AddButton({
	Name = "Get Land on Chosen Plot",
	Callback = function()
        for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
            if v:FindFirstChild("OriginSquare") then
                if v.OriginSquare:FindFirstChild("Selection") then
                game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,2,0)
                break
            end
        end
    end
end
})

Tab:AddButton({
	Name = "Force Save Slot",
	Callback = function()
        local result = false
    repeat
        wait(1)
        getgenv().block_save = false
        local slot_id = game:GetService("Players")["LocalPlayer"]["CurrentSaveSlot"].Value
        result = game.ReplicatedStorage.LoadSaveRequests.RequestSave:InvokeServer(slot_id, game.Players.LocalPlayer)
        OrionLib:MakeNotification({
            Name = "Pumpkin",
            Content = "Slot saved.",
            Image = "rbxassetid://12576176007",
            Time = 5
        })
        until result
        getgenv().block_save = true
  	end    
})

local Tab = Window:MakeTab({
	Name = "Timing",
	Icon = "rbxassetid://",
	PremiumOnly = false
})

local Section = Tab:AddSection({
        Name = "Stopwatch"
})

local stopwatchRunning = false
local startTime = tick()

Tab:AddButton({
    Name = "Start Stopwatch",
    Callback = function()
        stopwatchStartTime = tick()
        stopwatchRunning = true
    end
})

Tab:AddButton({
    Name = "Stop Stopwatch",
    Callback = function()
        stopwatchRunning = false
        startTime = tick()
    end
})

Tab:AddSlider({
    Name = "Elapsed Time (Don't Touch)",
    Min = 0,
    Max = 60,
    Default = 0,
    Color = Color3.fromRGB(218,73,0),
    Increment = 0.01,
    ValueName = "Seconds"
})

game:GetService("RunService").Heartbeat:Connect(function()
    if stopwatchRunning then
        local elapsedTime = tick() - startTime
        local seconds = math.floor(elapsedTime)
        local milliseconds = math.floor((elapsedTime - seconds) * 1000)
        local roundedMilliseconds = math.round(milliseconds / 10) * 10 -- round to nearest hundredths
        if roundedMilliseconds == 1000 then
            seconds = seconds + 1
            roundedMilliseconds = 0
        end
        local formattedTime = string.format("%d.%02d seconds", seconds, roundedMilliseconds)
        game:GetService("Chat"):Chat(game.Players.LocalPlayer.Character.Head, "Elapsed Time: " .. formattedTime)
    else
        startTime = tick()
    end
end)






OrionLib:Init()

--extra functions---------------------------------------------------------

scr=getsenv(game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.PropertyPurchasingClient);

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()



bind = "q" 



mouse.KeyDown:connect(function(key)
if key == bind then
    repeat wait()until game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase.Visible;
    wait(1)
    wait(0.9)
    for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
        game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,2,0)
        break
        end
    end
end
end)



local player = game.Players.LocalPlayer
local mouse = player:GetMouse()



bind = "p" 



mouse.KeyDown:connect(function(key)
if key == bind then
    repeat wait()until game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase.Visible;
    wait(1)
    wait(2)
    task.wait(timetotp - 2)
    loadstring(game:GetObjects("rbxassetid://2662507900")[1].Source)()
end
end)


local player = game.Players.LocalPlayer
local mouse = player:GetMouse()



bind = "t" 



mouse.KeyDown:connect(function(key)
if key == bind then
    repeat wait()until game.Players.LocalPlayer.PlayerGui.PropertyPurchasingGUI.SelectPurchase.Visible;
    wait(0.3)
    scr.scrollSelection(-1);
    wait(0.1)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
    scr.scrollSelection(-1);
    wait(0.3)
    scr.selectionMade();
    wait(0.3)
    scr.selectionMade();
    wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();
wait(1)
scr.scrollSelection(-1);
wait(0.3)
scr.selectionMade();
wait(0.3)
scr.selectionMade();                       
end
end)
